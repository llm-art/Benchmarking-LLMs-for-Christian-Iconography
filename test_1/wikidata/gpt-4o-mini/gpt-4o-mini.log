2025-05-23 09:08:42,762 - INFO - Logger initialized for wikidata/test_1/gpt-4o-mini
2025-05-23 09:08:42,763 - INFO - Starting classification for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-05-23 09:08:43,023 - INFO - Number of images: 735
2025-05-23 09:08:43,023 - INFO - Processing dataset: wikidata
2025-05-23 09:08:43,028 - INFO - Processing images for test: test_1
2025-05-23 09:08:43,106 - INFO - Loaded 718 valid cached results (ignoring zero arrays)
2025-05-23 09:08:43,106 - INFO - Using model: gpt-4o-mini
2025-05-23 09:11:14,936 - INFO - Logger initialized for wikidata/test_1/gpt-4o-mini
2025-05-23 09:11:14,937 - INFO - Starting classification for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-05-23 09:11:15,218 - INFO - Number of images: 735
2025-05-23 09:11:15,218 - INFO - Processing dataset: wikidata
2025-05-23 09:11:15,223 - INFO - Processing images for test: test_1
2025-05-23 09:11:15,297 - INFO - Loaded 718 valid cached results (ignoring zero arrays)
2025-05-23 09:11:15,297 - INFO - Using model: gpt-4o-mini
2025-05-23 09:11:15,297 - INFO - Limiting to 250 images
2025-05-23 09:12:21,778 - INFO - Cache saved after 5 batches
2025-05-23 09:12:49,184 - INFO - Cache saved after 10 batches
2025-05-23 09:13:03,869 - INFO - Reconciled similar class: 11H(MARY MAGDALENE) -> 11HH(MARY MAGDALENE)
2025-05-23 09:13:21,654 - INFO - Reconciled similar class: 11H(MARY MAGDALENE) -> 11HH(MARY MAGDALENE)
2025-05-23 09:13:45,702 - INFO - Cache saved after 15 batches
2025-05-23 09:14:29,293 - INFO - Cache saved after 20 batches
2025-05-23 09:15:03,893 - INFO - Reached limit of 250 processed images during batch processing.
2025-05-23 09:15:03,899 - INFO - Total input tokens used: 1364054
2025-05-23 09:15:03,900 - INFO - Total output tokens used: 699
2025-05-23 09:15:03,900 - INFO - Total cost of this call: $0.2050
2025-05-23 09:15:03,900 - INFO - Requested limit: 250, Actual processed: 250
2025-05-23 09:15:03,900 - INFO - Probabilities shape: (250, 10)
2025-05-23 09:17:21,348 - INFO - Logger initialized for wikidata/test_1/gpt-4o-mini
2025-05-23 09:17:21,350 - INFO - Starting classification for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-05-23 09:17:21,606 - INFO - Number of images: 735
2025-05-23 09:17:21,606 - INFO - Processing dataset: wikidata
2025-05-23 09:17:21,611 - INFO - Processing images for test: test_1
2025-05-23 09:17:21,690 - INFO - Loaded 760 valid cached results (ignoring zero arrays)
2025-05-23 09:17:21,690 - INFO - Using model: gpt-4o-mini
2025-05-23 11:19:21,573 - INFO - Logger initialized for wikidata/test_1/gpt-4o-mini
2025-05-23 11:19:21,574 - INFO - Starting classification for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-05-23 11:19:21,832 - INFO - Number of images: 735
2025-05-23 11:19:21,833 - INFO - Processing dataset: wikidata
2025-05-23 11:19:21,837 - INFO - Processing images for test: test_1
2025-05-23 11:19:21,907 - INFO - Loaded 760 valid cached results (ignoring zero arrays)
2025-05-23 11:19:21,907 - INFO - Using model: gpt-4o-mini
2025-05-23 11:49:46,955 - ERROR - Error processing batch: Request timed out.
2025-05-23 11:50:05,869 - INFO - Cache saved after 5 batches
2025-05-23 11:50:46,323 - INFO - Reconciled similar class: 11H(JANES) -> 11H(JOHN THE BAPTIST)
2025-05-23 11:50:55,644 - INFO - Cache saved after 10 batches
2025-05-23 11:52:06,898 - INFO - Cache saved after 15 batches
2025-05-23 11:52:23,154 - INFO - Total input tokens used: 885374
2025-05-23 11:52:23,154 - INFO - Total output tokens used: 449
2025-05-23 11:52:23,154 - INFO - Total cost of this call: $0.1331
2025-05-23 11:52:23,155 - INFO - Probabilities shape: (734, 10)
2025-06-09 12:29:44,457 - INFO - Logger initialized for wikidata/test_1/gpt-4o-mini
2025-06-09 12:29:44,458 - INFO - Starting classification for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-06-09 12:29:44,602 - WARNING - Failed to find 24 images
2025-06-09 12:29:44,602 - INFO - Number of images: 711
2025-06-09 12:29:44,602 - INFO - Processing dataset: wikidata
2025-06-09 12:29:44,605 - INFO - Processing images for test: test_1
2025-06-09 12:29:44,635 - INFO - Using model: gpt-4o-mini
2025-06-09 12:29:44,635 - INFO - === GENERATED PROMPT ===
2025-06-09 12:29:44,635 - INFO - Dataset: wikidata, Test: test_1
2025-06-09 12:29:44,635 - INFO - Hyperparameters: temperature=0.0, top_p=0.1
2025-06-09 12:29:44,635 - INFO - Prompt content:
2025-06-09 12:29:44,635 - INFO - You are an expert in Christian iconography and art history. Classify each religious artwork image into exactly ONE saint category using visual attributes, iconographic symbols, and contextual clues.



Look for:
1. Distinctive attributes (objects, clothing, etc.)
2. Gestures and postures
3. Contextual and symbolic elements

Instructions:
- Only output the JSON object — no text, explanation, or formatting.
- Include every image in the current batch. Each must receive exactly one classification with a confidence score.
- You may only use one of the exact strings from the category list below. Any response not matching the allowed category IDs will be rejected.

Return a valid **JSON object** with confidence scores (0.0 to 1.0) matching this format:
{
  "<image_id>": {"class": "<CATEGORY_ID>", "confidence": <0.0-1.0>},
  "<image_id>": {"class": "<CATEGORY_ID>", "confidence": <0.0-1.0>},
  ...
}

Confidence guidelines:
- 0.9-1.0: Very certain identification with clear iconographic evidence
- 0.7-0.9: Confident with multiple supporting visual elements  
- 0.5-0.7: Moderate confidence, some ambiguity present
- 0.3-0.5: Low confidence, limited visual evidence
- 0.0-0.3: Very uncertain, minimal supporting evidence

Each <CATEGORY_ID> must be one of (use only the category ID as output):

"mary_magdalene" - Mary Magdalene
"john_baptist" - St. John the Baptist
"jerome" - St. Jerome
"catherine" - St. Catherine
"peter" - St. Peter
"john" - St. John the Evangelist
"paul" - St. Paul
"antony_abbot" - St. Anthony Abbot
"francis" - St. Francis of Assisi
"joseph" - St. Joseph

Batching note:
- Process only the current batch of images.
- Use the image IDs exactly as provided in the input.
- Do not reference or depend on other batches.

NOTE: These are historical Renaissance paintings used for academic classification.  
Some artworks include scenes of martyrdom or classical nudity as typical in religious iconography.  
Treat all content as scholarly, respectful of historical context, and strictly non-sexual.

2025-06-09 12:29:44,635 - INFO - === END PROMPT ===
2025-06-09 12:30:46,292 - INFO - Cache saved after 5 batches
2025-06-09 12:31:49,166 - INFO - Cache saved after 10 batches
2025-06-09 12:32:44,132 - INFO - Cache saved after 15 batches
2025-06-09 12:33:32,593 - INFO - Cache saved after 20 batches
2025-06-09 12:34:26,369 - INFO - Cache saved after 25 batches
2025-06-09 12:35:36,280 - INFO - Cache saved after 30 batches
2025-06-09 12:36:42,627 - INFO - Cache saved after 35 batches
2025-06-09 12:38:09,785 - INFO - Cache saved after 40 batches
2025-06-09 12:39:13,187 - INFO - Cache saved after 45 batches
2025-06-09 12:40:21,322 - INFO - Cache saved after 50 batches
2025-06-09 12:41:21,485 - INFO - Cache saved after 55 batches
2025-06-09 12:42:09,778 - INFO - Cache saved after 60 batches
2025-06-09 12:43:11,193 - INFO - Cache saved after 65 batches
2025-06-09 12:44:06,851 - INFO - Cache saved after 70 batches
2025-06-09 12:45:16,471 - INFO - Cache saved after 75 batches
2025-06-09 12:46:05,954 - INFO - Cache saved after 80 batches
2025-06-09 12:47:06,159 - INFO - Cache saved after 85 batches
2025-06-09 12:47:40,537 - INFO - Cache saved after 90 batches
2025-06-09 12:48:45,538 - INFO - Cache saved after 95 batches
2025-06-09 12:49:41,894 - INFO - Cache saved after 100 batches
2025-06-09 12:50:44,709 - INFO - Cache saved after 105 batches
2025-06-09 12:51:25,941 - INFO - Cache saved after 110 batches
2025-06-09 12:52:19,426 - INFO - Cache saved after 115 batches
2025-06-09 12:53:12,598 - INFO - Cache saved after 120 batches
2025-06-09 12:54:30,785 - INFO - Cache saved after 125 batches
2025-06-09 12:55:26,813 - INFO - Cache saved after 130 batches
2025-06-09 12:56:35,988 - INFO - Cache saved after 135 batches
2025-06-09 12:57:47,849 - INFO - Cache saved after 140 batches
2025-06-09 12:58:16,977 - INFO - Total input tokens used: 21171706
2025-06-09 12:58:16,977 - INFO - Total output tokens used: 16713
2025-06-09 12:58:16,977 - INFO - Total cost of this call: $3.1858
2025-06-09 12:58:16,977 - INFO - Probabilities shape: (711, 10)
2025-06-19 00:56:06,444 - INFO - Logger initialized for wikidata/test_1/gpt-4o-mini
2025-06-19 00:56:06,444 - INFO - Starting classification for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-06-19 00:56:06,677 - WARNING - Failed to find 24 images
2025-06-19 00:56:06,677 - INFO - Number of images: 711
2025-06-19 00:56:06,677 - INFO - Processing dataset: wikidata
2025-06-19 00:56:06,679 - INFO - Processing images for test: test_1
2025-06-19 00:56:06,680 - INFO - Cleaned previous cache and logs for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-06-19 00:56:06,697 - INFO - Using model: gpt-4o-mini
2025-06-19 00:56:06,698 - INFO - === GENERATED PROMPT ===
2025-06-19 00:56:06,698 - INFO - Dataset: wikidata, Test: test_1
2025-06-19 00:56:06,698 - INFO - Hyperparameters: temperature=0.0, top_p=0.1, seed=12345
2025-06-19 00:56:06,698 - INFO - Prompt content:
2025-06-19 00:56:06,698 - INFO - You are an expert in Christian iconography and art history. Classify each religious artwork image into exactly ONE saint category using visual attributes, iconographic symbols, and contextual clues.



Look for:
1. Distinctive attributes (objects, clothing, etc.)
2. Gestures and postures
3. Contextual and symbolic elements

Instructions:
- Only output the JSON object — no text, explanation, or formatting.
- Include every image in the current batch. Each must receive exactly one classification with a confidence score.
- You may only use one of the exact strings from the category list below. Any response not matching the allowed category IDs will be rejected.

Return a valid **JSON object** with confidence scores (0.0 to 1.0) matching this format:
{
  "<image_id>": {"class": "<CATEGORY_ID>", "confidence": <0.0-1.0>},
  "<image_id>": {"class": "<CATEGORY_ID>", "confidence": <0.0-1.0>},
  ...
}

Confidence guidelines:
- 0.9-1.0: Very certain identification with clear iconographic evidence
- 0.7-0.9: Confident with multiple supporting visual elements  
- 0.5-0.7: Moderate confidence, some ambiguity present
- 0.3-0.5: Low confidence, limited visual evidence
- 0.0-0.3: Very uncertain, minimal supporting evidence

Each <CATEGORY_ID> must be one of (use only the category ID as output):

"mary_magdalene" - Mary Magdalene
"john_baptist" - St. John the Baptist
"jerome" - St. Jerome
"catherine" - St. Catherine
"peter" - St. Peter
"john" - St. John the Evangelist
"paul" - St. Paul
"antony_abbot" - St. Anthony Abbot
"francis" - St. Francis of Assisi
"joseph" - St. Joseph

Batching note:
- Process only the current batch of images.
- Use the image IDs exactly as provided in the input.
- Do not reference or depend on other batches.

NOTE: These are historical Renaissance paintings used for academic classification.  
Some artworks include scenes of martyrdom or classical nudity as typical in religious iconography.  
Treat all content as scholarly, respectful of historical context, and strictly non-sexual.

2025-06-19 00:56:06,698 - INFO - === END PROMPT ===
2025-06-19 00:56:17,662 - INFO - Batch 1: system_fingerprint=fp_62a23a81ef
2025-06-19 00:56:25,890 - INFO - Batch 2: system_fingerprint=fp_62a23a81ef
2025-06-19 00:56:40,359 - INFO - Batch 3: system_fingerprint=fp_62a23a81ef
2025-06-19 00:56:56,883 - INFO - Batch 4: system_fingerprint=fp_62a23a81ef
2025-06-19 00:57:06,213 - INFO - Batch 5: system_fingerprint=fp_62a23a81ef
2025-06-19 00:57:06,214 - INFO - Cache saved after 5 batches
2025-06-19 00:57:22,806 - INFO - Batch 6: system_fingerprint=fp_62a23a81ef
2025-06-19 00:57:33,590 - INFO - Batch 7: system_fingerprint=fp_62a23a81ef
2025-06-19 00:57:42,802 - INFO - Batch 8: system_fingerprint=fp_62a23a81ef
2025-06-19 00:57:52,679 - INFO - Batch 9: system_fingerprint=fp_62a23a81ef
2025-06-19 00:58:01,884 - INFO - Batch 10: system_fingerprint=fp_62a23a81ef
2025-06-19 00:58:01,885 - INFO - Cache saved after 10 batches
2025-06-19 00:58:14,570 - INFO - Batch 11: system_fingerprint=fp_62a23a81ef
2025-06-19 00:58:32,783 - INFO - Batch 12: system_fingerprint=fp_62a23a81ef
2025-06-19 00:58:43,646 - INFO - Batch 13: system_fingerprint=fp_62a23a81ef
2025-06-19 00:58:51,127 - INFO - Batch 14: system_fingerprint=fp_62a23a81ef
2025-06-19 00:58:58,790 - INFO - Batch 15: system_fingerprint=fp_62a23a81ef
2025-06-19 00:58:58,791 - INFO - Cache saved after 15 batches
2025-06-19 00:59:07,495 - INFO - Batch 16: system_fingerprint=fp_62a23a81ef
2025-06-19 00:59:15,167 - INFO - Batch 17: system_fingerprint=fp_62a23a81ef
2025-06-19 00:59:26,313 - INFO - Batch 18: system_fingerprint=fp_62a23a81ef
2025-06-19 00:59:35,491 - INFO - Batch 19: system_fingerprint=fp_62a23a81ef
2025-06-19 00:59:53,586 - INFO - Batch 20: system_fingerprint=fp_62a23a81ef
2025-06-19 00:59:53,587 - INFO - Cache saved after 20 batches
2025-06-19 01:00:04,968 - INFO - Batch 21: system_fingerprint=fp_62a23a81ef
2025-06-19 01:00:14,501 - INFO - Batch 22: system_fingerprint=fp_62a23a81ef
2025-06-19 01:00:22,230 - INFO - Batch 23: system_fingerprint=fp_62a23a81ef
2025-06-19 01:00:30,965 - INFO - Batch 24: system_fingerprint=fp_62a23a81ef
2025-06-19 01:00:39,499 - INFO - Batch 25: system_fingerprint=fp_62a23a81ef
2025-06-19 01:00:39,500 - INFO - Cache saved after 25 batches
2025-06-19 01:00:46,634 - INFO - Batch 26: system_fingerprint=fp_62a23a81ef
2025-06-19 01:00:59,191 - INFO - Batch 27: system_fingerprint=fp_62a23a81ef
2025-06-19 01:01:06,958 - INFO - Batch 28: system_fingerprint=fp_62a23a81ef
2025-06-19 01:01:14,204 - INFO - Batch 29: system_fingerprint=fp_62a23a81ef
2025-06-19 01:01:29,442 - INFO - Batch 30: system_fingerprint=fp_62a23a81ef
2025-06-19 01:01:29,443 - INFO - Cache saved after 30 batches
2025-06-19 01:01:45,080 - INFO - Batch 31: system_fingerprint=fp_62a23a81ef
2025-06-19 01:01:54,265 - INFO - Batch 32: system_fingerprint=fp_62a23a81ef
2025-06-19 01:02:08,553 - INFO - Batch 33: system_fingerprint=fp_62a23a81ef
2025-06-19 01:02:19,008 - INFO - Batch 34: system_fingerprint=fp_62a23a81ef
2025-06-19 01:02:29,252 - INFO - Batch 35: system_fingerprint=fp_62a23a81ef
2025-06-19 01:02:29,254 - INFO - Cache saved after 35 batches
2025-06-19 01:02:38,253 - INFO - Batch 36: system_fingerprint=fp_62a23a81ef
2025-06-19 01:02:49,557 - INFO - Batch 37: system_fingerprint=fp_62a23a81ef
2025-06-19 01:03:04,316 - INFO - Batch 38: system_fingerprint=fp_62a23a81ef
2025-06-19 01:03:10,673 - INFO - Batch 39: system_fingerprint=fp_62a23a81ef
2025-06-19 01:03:33,952 - INFO - Batch 40: system_fingerprint=fp_62a23a81ef
2025-06-19 01:03:33,954 - INFO - Cache saved after 40 batches
2025-06-19 01:03:44,856 - INFO - Batch 41: system_fingerprint=fp_62a23a81ef
2025-06-19 01:04:00,409 - INFO - Batch 42: system_fingerprint=fp_62a23a81ef
2025-06-19 01:04:14,236 - INFO - Batch 43: system_fingerprint=fp_62a23a81ef
2025-06-19 01:04:21,615 - INFO - Batch 44: system_fingerprint=fp_62a23a81ef
2025-06-19 01:04:28,469 - INFO - Batch 45: system_fingerprint=fp_62a23a81ef
2025-06-19 01:04:28,470 - INFO - Cache saved after 45 batches
2025-06-19 01:04:39,054 - INFO - Batch 46: system_fingerprint=fp_62a23a81ef
2025-06-19 01:04:44,868 - INFO - Batch 47: system_fingerprint=fp_62a23a81ef
2025-06-19 01:04:59,859 - INFO - Batch 48: system_fingerprint=fp_62a23a81ef
2025-06-19 01:05:07,672 - INFO - Batch 49: system_fingerprint=fp_62a23a81ef
2025-06-19 01:05:16,157 - INFO - Batch 50: system_fingerprint=fp_62a23a81ef
2025-06-19 01:05:16,159 - INFO - Cache saved after 50 batches
2025-06-19 01:05:28,735 - INFO - Batch 51: system_fingerprint=fp_62a23a81ef
2025-06-19 01:05:37,081 - INFO - Batch 52: system_fingerprint=fp_62a23a81ef
2025-06-19 01:05:50,159 - INFO - Batch 53: system_fingerprint=fp_62a23a81ef
2025-06-19 01:05:56,432 - INFO - Batch 54: system_fingerprint=fp_62a23a81ef
2025-06-19 01:06:06,397 - INFO - Batch 55: system_fingerprint=fp_62a23a81ef
2025-06-19 01:06:06,399 - INFO - Cache saved after 55 batches
2025-06-19 01:06:16,870 - INFO - Batch 56: system_fingerprint=fp_62a23a81ef
2025-06-19 01:06:28,595 - INFO - Batch 57: system_fingerprint=fp_62a23a81ef
2025-06-19 01:06:38,542 - INFO - Batch 58: system_fingerprint=fp_62a23a81ef
2025-06-19 01:06:51,000 - INFO - Batch 59: system_fingerprint=fp_62a23a81ef
2025-06-19 01:07:00,467 - INFO - Batch 60: system_fingerprint=fp_62a23a81ef
2025-06-19 01:07:00,469 - INFO - Cache saved after 60 batches
2025-06-19 01:07:11,703 - INFO - Batch 61: system_fingerprint=fp_62a23a81ef
2025-06-19 01:07:21,961 - INFO - Batch 62: system_fingerprint=fp_62a23a81ef
2025-06-19 01:07:32,538 - INFO - Batch 63: system_fingerprint=fp_62a23a81ef
2025-06-19 01:07:45,318 - INFO - Batch 64: system_fingerprint=fp_62a23a81ef
2025-06-19 01:07:55,179 - INFO - Batch 65: system_fingerprint=fp_62a23a81ef
2025-06-19 01:07:55,181 - INFO - Cache saved after 65 batches
2025-06-19 01:08:00,494 - INFO - Batch 66: system_fingerprint=fp_62a23a81ef
2025-06-19 01:08:08,612 - INFO - Batch 67: system_fingerprint=fp_62a23a81ef
2025-06-19 01:08:17,588 - INFO - Batch 68: system_fingerprint=fp_62a23a81ef
2025-06-19 01:08:34,084 - INFO - Batch 69: system_fingerprint=fp_62a23a81ef
2025-06-19 01:08:41,777 - INFO - Batch 70: system_fingerprint=fp_62a23a81ef
2025-06-19 01:08:41,779 - INFO - Cache saved after 70 batches
2025-06-19 01:08:50,900 - INFO - Batch 71: system_fingerprint=fp_62a23a81ef
2025-06-19 01:09:05,200 - INFO - Batch 72: system_fingerprint=fp_62a23a81ef
2025-06-19 01:09:24,841 - INFO - Batch 73: system_fingerprint=fp_62a23a81ef
2025-06-19 01:09:35,265 - INFO - Batch 74: system_fingerprint=fp_62a23a81ef
2025-06-19 01:09:50,924 - INFO - Batch 75: system_fingerprint=fp_62a23a81ef
2025-06-19 01:09:50,926 - INFO - Cache saved after 75 batches
2025-06-19 01:10:00,887 - INFO - Batch 76: system_fingerprint=fp_62a23a81ef
2025-06-19 01:10:12,248 - INFO - Batch 77: system_fingerprint=fp_62a23a81ef
2025-06-19 01:10:18,746 - INFO - Batch 78: system_fingerprint=fp_62a23a81ef
2025-06-19 01:10:27,024 - INFO - Batch 79: system_fingerprint=fp_62a23a81ef
2025-06-19 01:10:39,038 - INFO - Batch 80: system_fingerprint=fp_62a23a81ef
2025-06-19 01:10:39,041 - INFO - Cache saved after 80 batches
2025-06-19 01:10:47,983 - INFO - Batch 81: system_fingerprint=fp_62a23a81ef
2025-06-19 01:11:03,946 - INFO - Batch 82: system_fingerprint=fp_62a23a81ef
2025-06-19 01:11:12,334 - INFO - Batch 83: system_fingerprint=fp_62a23a81ef
2025-06-19 01:11:19,889 - INFO - Batch 84: system_fingerprint=fp_62a23a81ef
2025-06-19 01:11:27,559 - INFO - Batch 85: system_fingerprint=fp_62a23a81ef
2025-06-19 01:11:27,562 - INFO - Cache saved after 85 batches
2025-06-19 01:11:36,742 - INFO - Batch 86: system_fingerprint=fp_62a23a81ef
2025-06-19 01:11:44,065 - INFO - Batch 87: system_fingerprint=fp_62a23a81ef
2025-06-19 01:11:50,906 - INFO - Batch 88: system_fingerprint=fp_62a23a81ef
2025-06-19 01:11:56,724 - INFO - Batch 89: system_fingerprint=fp_62a23a81ef
2025-06-19 01:12:06,504 - INFO - Batch 90: system_fingerprint=fp_62a23a81ef
2025-06-19 01:12:06,506 - INFO - Cache saved after 90 batches
2025-06-19 01:12:20,731 - INFO - Batch 91: system_fingerprint=fp_62a23a81ef
2025-06-19 01:12:29,385 - INFO - Batch 92: system_fingerprint=fp_62a23a81ef
2025-06-19 01:12:39,352 - INFO - Batch 93: system_fingerprint=fp_62a23a81ef
2025-06-19 01:12:46,790 - INFO - Batch 94: system_fingerprint=fp_62a23a81ef
2025-06-19 01:13:01,542 - INFO - Batch 95: system_fingerprint=fp_62a23a81ef
2025-06-19 01:13:01,545 - INFO - Cache saved after 95 batches
2025-06-19 01:13:10,265 - INFO - Batch 96: system_fingerprint=fp_62a23a81ef
2025-06-19 01:13:23,840 - INFO - Batch 97: system_fingerprint=fp_62a23a81ef
2025-06-19 01:13:33,680 - INFO - Batch 98: system_fingerprint=fp_62a23a81ef
2025-06-19 01:13:42,240 - INFO - Batch 99: system_fingerprint=fp_62a23a81ef
2025-06-19 01:13:49,103 - INFO - Batch 100: system_fingerprint=fp_62a23a81ef
2025-06-19 01:13:49,106 - INFO - Cache saved after 100 batches
2025-06-19 01:14:01,537 - INFO - Batch 101: system_fingerprint=fp_62a23a81ef
2025-06-19 01:14:10,272 - INFO - Batch 102: system_fingerprint=fp_62a23a81ef
2025-06-19 01:14:26,502 - INFO - Batch 103: system_fingerprint=fp_62a23a81ef
2025-06-19 01:14:34,353 - INFO - Batch 104: system_fingerprint=fp_62a23a81ef
2025-06-19 01:14:44,121 - INFO - Batch 105: system_fingerprint=fp_62a23a81ef
2025-06-19 01:14:44,124 - INFO - Cache saved after 105 batches
2025-06-19 01:14:52,681 - INFO - Batch 106: system_fingerprint=fp_62a23a81ef
2025-06-19 01:14:59,777 - INFO - Batch 107: system_fingerprint=fp_62a23a81ef
2025-06-19 01:15:04,842 - INFO - Batch 108: system_fingerprint=fp_62a23a81ef
2025-06-19 01:15:14,299 - INFO - Batch 109: system_fingerprint=fp_62a23a81ef
2025-06-19 01:15:25,512 - INFO - Batch 110: system_fingerprint=fp_62a23a81ef
2025-06-19 01:15:25,515 - INFO - Cache saved after 110 batches
2025-06-19 01:15:33,253 - INFO - Batch 111: system_fingerprint=fp_62a23a81ef
2025-06-19 01:15:42,031 - INFO - Batch 112: system_fingerprint=fp_62a23a81ef
2025-06-19 01:15:48,334 - INFO - Batch 113: system_fingerprint=fp_62a23a81ef
2025-06-19 01:16:04,251 - INFO - Batch 114: system_fingerprint=fp_62a23a81ef
2025-06-19 01:16:12,463 - INFO - Batch 115: system_fingerprint=fp_62a23a81ef
2025-06-19 01:16:12,466 - INFO - Cache saved after 115 batches
2025-06-19 01:16:25,371 - INFO - Batch 116: system_fingerprint=fp_62a23a81ef
2025-06-19 01:16:39,259 - INFO - Batch 117: system_fingerprint=fp_62a23a81ef
2025-06-19 01:16:47,530 - INFO - Batch 118: system_fingerprint=fp_62a23a81ef
2025-06-19 01:16:54,223 - INFO - Batch 119: system_fingerprint=fp_62a23a81ef
2025-06-19 01:17:03,485 - INFO - Batch 120: system_fingerprint=fp_62a23a81ef
2025-06-19 01:17:03,488 - INFO - Cache saved after 120 batches
2025-06-19 01:17:10,709 - INFO - Batch 121: system_fingerprint=fp_62a23a81ef
2025-06-19 01:17:33,391 - INFO - Batch 122: system_fingerprint=fp_62a23a81ef
2025-06-19 01:17:43,665 - INFO - Batch 123: system_fingerprint=fp_62a23a81ef
2025-06-19 01:17:58,770 - INFO - Batch 124: system_fingerprint=fp_62a23a81ef
2025-06-19 01:18:09,517 - INFO - Batch 125: system_fingerprint=fp_62a23a81ef
2025-06-19 01:18:09,521 - INFO - Cache saved after 125 batches
2025-06-19 01:18:14,939 - INFO - Batch 126: system_fingerprint=fp_62a23a81ef
2025-06-19 01:18:24,903 - INFO - Batch 127: system_fingerprint=fp_62a23a81ef
2025-06-19 01:18:32,073 - INFO - Batch 128: system_fingerprint=fp_62a23a81ef
2025-06-19 01:18:50,835 - INFO - Batch 129: system_fingerprint=fp_62a23a81ef
2025-06-19 01:19:04,985 - INFO - Batch 130: system_fingerprint=fp_62a23a81ef
2025-06-19 01:19:04,989 - INFO - Cache saved after 130 batches
2025-06-19 01:19:18,565 - INFO - Batch 131: system_fingerprint=fp_62a23a81ef
2025-06-19 01:19:30,521 - INFO - Batch 132: system_fingerprint=fp_62a23a81ef
2025-06-19 01:19:38,876 - INFO - Batch 133: system_fingerprint=fp_62a23a81ef
2025-06-19 01:19:46,698 - INFO - Batch 134: system_fingerprint=fp_62a23a81ef
2025-06-19 01:20:04,913 - INFO - Batch 135: system_fingerprint=fp_62a23a81ef
2025-06-19 01:20:04,917 - INFO - Cache saved after 135 batches
2025-06-19 01:20:13,910 - INFO - Batch 136: system_fingerprint=fp_62a23a81ef
2025-06-19 01:20:19,559 - INFO - Batch 137: system_fingerprint=fp_62a23a81ef
2025-06-19 01:20:27,134 - INFO - Batch 138: system_fingerprint=fp_62a23a81ef
2025-06-19 01:20:35,776 - INFO - Batch 139: system_fingerprint=fp_62a23a81ef
2025-06-19 01:20:51,342 - INFO - Batch 140: system_fingerprint=fp_62a23a81ef
2025-06-19 01:20:51,346 - INFO - Cache saved after 140 batches
2025-06-19 01:20:58,811 - INFO - Batch 141: system_fingerprint=fp_62a23a81ef
2025-06-19 01:21:09,307 - INFO - Batch 142: system_fingerprint=fp_62a23a81ef
2025-06-19 01:21:12,188 - INFO - Batch 143: system_fingerprint=fp_62a23a81ef
2025-06-19 01:21:12,192 - INFO - Total input tokens used: 21171706
2025-06-19 01:21:12,193 - INFO - Total output tokens used: 16721
2025-06-19 01:21:12,193 - INFO - Total cost of this call: $3.1858
2025-06-19 01:21:12,193 - INFO - Probabilities shape: (711, 10)
2025-06-19 13:28:49,868 - INFO - Logger initialized for wikidata/test_1/gpt-4o-mini
2025-06-19 13:28:49,868 - INFO - Starting classification for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-06-19 13:28:50,039 - WARNING - Failed to find 24 images
2025-06-19 13:28:50,039 - INFO - Number of images: 711
2025-06-19 13:28:50,039 - INFO - Processing dataset: wikidata
2025-06-19 13:28:50,041 - INFO - Processing images for test: test_1
2025-06-19 13:28:50,060 - INFO - Loaded 711 cached results
2025-06-19 13:28:50,060 - INFO - Using model: gpt-4o-mini
2025-06-19 13:28:50,060 - INFO - === GENERATED PROMPT ===
2025-06-19 13:28:50,060 - INFO - Dataset: wikidata, Test: test_1
2025-06-19 13:28:50,060 - INFO - Hyperparameters: temperature=0.0, top_p=0.1, seed=12345
2025-06-19 13:28:50,060 - INFO - Prompt content:
2025-06-19 13:28:50,060 - INFO - You are an expert in Christian iconography and art history. Classify each religious artwork image into exactly ONE saint category using visual attributes, iconographic symbols, and contextual clues.



Look for:
1. Distinctive attributes (objects, clothing, etc.)
2. Gestures and postures
3. Contextual and symbolic elements

Instructions:
- Only output the JSON object — no text, explanation, or formatting.
- Include every image in the current batch. Each must receive exactly one classification with a confidence score.
- You may only use one of the exact strings from the category list below. Any response not matching the allowed category IDs will be rejected.

Return a valid **JSON object** with confidence scores (0.0 to 1.0) matching this format:
{
  "<image_id>": {"class": "<CATEGORY_ID>", "confidence": <0.0-1.0>},
  "<image_id>": {"class": "<CATEGORY_ID>", "confidence": <0.0-1.0>},
  ...
}

Confidence guidelines:
- 0.9-1.0: Very certain identification with clear iconographic evidence
- 0.7-0.9: Confident with multiple supporting visual elements  
- 0.5-0.7: Moderate confidence, some ambiguity present
- 0.3-0.5: Low confidence, limited visual evidence
- 0.0-0.3: Very uncertain, minimal supporting evidence

Each <CATEGORY_ID> must be one of (use only the category ID as output):

"mary_magdalene" - Mary Magdalene
"john_baptist" - St. John the Baptist
"jerome" - St. Jerome
"catherine" - St. Catherine
"peter" - St. Peter
"john" - St. John the Evangelist
"paul" - St. Paul
"antony_abbot" - St. Anthony Abbot
"francis" - St. Francis of Assisi
"joseph" - St. Joseph

Batching note:
- Process only the current batch of images.
- Use the image IDs exactly as provided in the input.
- Do not reference or depend on other batches.

NOTE: These are historical Renaissance paintings used for academic classification.  
Some artworks include scenes of martyrdom or classical nudity as typical in religious iconography.  
Treat all content as scholarly, respectful of historical context, and strictly non-sexual.

2025-06-19 13:28:50,061 - INFO - === END PROMPT ===
2025-06-19 13:28:50,064 - INFO - Total input tokens used: 0
2025-06-19 13:28:50,064 - INFO - Total output tokens used: 0
2025-06-19 13:28:50,064 - INFO - Total cost of this call: $0.0000
2025-06-19 13:28:50,065 - INFO - Probabilities shape: (711, 10)
2025-06-19 13:33:49,540 - INFO - Logger initialized for wikidata/test_1/gpt-4o-mini
2025-06-19 13:33:49,540 - INFO - Starting classification for dataset=wikidata, test=test_1, model=gpt-4o-mini
2025-06-19 13:33:49,718 - WARNING - Failed to find 24 images
2025-06-19 13:33:49,719 - INFO - Number of images: 711
2025-06-19 13:33:49,719 - INFO - Processing dataset: wikidata
2025-06-19 13:33:49,721 - INFO - Processing images for test: test_1
2025-06-19 13:33:49,741 - INFO - Loaded 711 cached results
2025-06-19 13:33:49,742 - INFO - Using model: gpt-4o-mini
2025-06-19 13:33:49,742 - INFO - === GENERATED PROMPT ===
2025-06-19 13:33:49,742 - INFO - Dataset: wikidata, Test: test_1
2025-06-19 13:33:49,742 - INFO - Hyperparameters: temperature=0.0, top_p=0.1, seed=12345
2025-06-19 13:33:49,742 - INFO - Prompt content:
2025-06-19 13:33:49,742 - INFO - You are an expert in Christian iconography and art history. Classify each religious artwork image into exactly ONE saint category using visual attributes, iconographic symbols, and contextual clues.



Look for:
1. Distinctive attributes (objects, clothing, etc.)
2. Gestures and postures
3. Contextual and symbolic elements

Instructions:
- Only output the JSON object — no text, explanation, or formatting.
- Include every image in the current batch. Each must receive exactly one classification with a confidence score.
- You may only use one of the exact strings from the category list below. Any response not matching the allowed category IDs will be rejected.

Return a valid **JSON object** with confidence scores (0.0 to 1.0) matching this format:
{
  "<image_id>": {"class": "<CATEGORY_ID>", "confidence": <0.0-1.0>},
  "<image_id>": {"class": "<CATEGORY_ID>", "confidence": <0.0-1.0>},
  ...
}

Confidence guidelines:
- 0.9-1.0: Very certain identification with clear iconographic evidence
- 0.7-0.9: Confident with multiple supporting visual elements  
- 0.5-0.7: Moderate confidence, some ambiguity present
- 0.3-0.5: Low confidence, limited visual evidence
- 0.0-0.3: Very uncertain, minimal supporting evidence

Each <CATEGORY_ID> must be one of (use only the category ID as output):

"mary_magdalene" - Mary Magdalene
"john_baptist" - St. John the Baptist
"jerome" - St. Jerome
"catherine" - St. Catherine
"peter" - St. Peter
"john" - St. John the Evangelist
"paul" - St. Paul
"antony_abbot" - St. Anthony Abbot
"francis" - St. Francis of Assisi
"joseph" - St. Joseph

Batching note:
- Process only the current batch of images.
- Use the image IDs exactly as provided in the input.
- Do not reference or depend on other batches.

NOTE: These are historical Renaissance paintings used for academic classification.  
Some artworks include scenes of martyrdom or classical nudity as typical in religious iconography.  
Treat all content as scholarly, respectful of historical context, and strictly non-sexual.

2025-06-19 13:33:49,742 - INFO - === END PROMPT ===
2025-06-19 13:33:49,745 - INFO - Total input tokens used: 0
2025-06-19 13:33:49,746 - INFO - Total output tokens used: 0
2025-06-19 13:33:49,746 - INFO - Total cost of this call: $0.0000
2025-06-19 13:33:49,746 - INFO - Probabilities shape: (711, 10)
